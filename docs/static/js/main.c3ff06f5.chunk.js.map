{"version":3,"sources":["Cell.tsx","WordFlipper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sty","StyleSheet","create","overall","overflow","transitionTimingFunction","transitionProperty","position","display","hiddenFixedWidthCell","opacity","cursorEvents","userSelect","cell","top","left","animationIterationCount","animationFillMode","fontFeatureSettings","showCell","animationName","transform","hideCell","Cell","props","fixedWidthCellRef","React","createRef","setWidth","current","cellWidth","scrollWidth","console","log","state","setState","activeCellOne","cellOneValue","value","cellTwoValue","undefined","requestAnimationFrame","this","activeCellHidden","style","width","transitionDelay","delayInMS","transitionDuration","durationInMS","className","css","onClick","s","ref","animationDelay","animationDuration","Component","WordFlipper","maxLength","flexDirection","Array","map","_","index","vv","padding","length","letter","key","height","background","fontSize","color","margin","App","switcher","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3ff06f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\n\nconst showTransition = {\n  \"0%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n  \"55%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n  \"100%\": {\n    opacity: 1,\n    transform: \"scale(1)\",\n  },\n};\n\nconst hideTransition = {\n  \"0%\": {\n    opacity: 1,\n    transform: \"scale(1)\",\n  },\n  \"45%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n  \"100%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n};\n\nconst sty = StyleSheet.create({\n  overall: {\n    overflow: \"hidden\",\n    transitionTimingFunction: \"ease\",\n    transitionProperty: \"all\",\n    position: \"relative\",\n    display: \"block\",\n  },\n  hiddenFixedWidthCell: {\n    opacity: 0,\n    cursorEvents: \"none\",\n    userSelect: 'none',\n  },\n  cell: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    animationIterationCount: 1,\n    animationFillMode: \"both\",\n    fontFeatureSettings: \"tnum\",\n  },\n  showCell: {\n    animationName: showTransition,\n    userSelect: 'auto',\n  },\n  hideCell: {\n    animationName: hideTransition,\n    \n  },\n});\n\ninterface State {\n  activeCellOne: boolean | null;\n  cellOneValue?: string;\n  cellTwoValue?: string;\n  cellWidth: number;\n}\n\ninterface Props {\n  value?: string;\n  delayInMS: number;\n  durationInMS: number;\n}\n\nclass Cell extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeCellOne: true,\n      cellOneValue: this.props.value,\n      cellTwoValue: undefined,\n      cellWidth: 0,\n    };\n  }\n\n  fixedWidthCellRef = React.createRef<HTMLDivElement>();\n\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (state.activeCellOne) {\n      return { cellTwoValue: props.value, activeCellOne: false };\n    }\n    if (state.activeCellOne === false) {\n      return { cellOneValue: props.value, activeCellOne: true };\n    }\n    return null;\n  }\n\n  setWidth = () => {\n    if (this.fixedWidthCellRef.current) {\n      const cellWidth = this.fixedWidthCellRef.current.scrollWidth;\n      console.log(cellWidth)\n      if (cellWidth > this.state.cellWidth) {\n        this.setState({ cellWidth });\n      }\n    } else {\n      console.log('heyy')\n    }\n  };\n\n  componentDidMount() {\n    requestAnimationFrame(this.setWidth)\n  }\n  componentDidUpdate() {\n    this.setWidth();\n  }\n\n  render() {\n    const activeCellHidden = this.state.activeCellOne\n      ? this.state.cellOneValue == null\n      : this.state.cellTwoValue == null;\n\n    return (\n      <span>\n        <div\n          style={{\n            width: activeCellHidden ? 0 : this.state.cellWidth,\n            transitionDelay: `${this.props.delayInMS}ms`,\n            transitionDuration: `${this.props.durationInMS}ms`,\n          }}\n          className={css(sty.overall)}\n          onClick={() =>\n            this.setState((s) => ({\n              activeCellOne: s.activeCellOne !== null ? !s.activeCellOne : null,\n            }))\n          }\n        >\n          <span\n            ref={this.fixedWidthCellRef}\n            className={css(sty.hiddenFixedWidthCell)}\n          >\n            8\n          </span>\n          <span\n            className={css(\n              sty.cell,\n              this.state.activeCellOne === true ? sty.showCell : sty.hideCell\n            )}\n            style={{\n              animationDelay: `${this.props.delayInMS}ms`,\n              animationDuration: `${this.props.durationInMS}ms`,\n            }}\n          >\n            {this.state.cellOneValue}\n          </span>\n          <span\n            className={css(\n              sty.cell,\n              this.state.activeCellOne === false ? sty.showCell : sty.hideCell\n            )}\n            style={{\n              animationDelay: `${this.props.delayInMS}ms`,\n              animationDuration: `${this.props.durationInMS}ms`,\n            }}\n          >\n            {this.state.cellTwoValue}\n          </span>\n        </div>\n      </span>\n    );\n  }\n}\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\n\ninterface Props {\n  durationInMS: number;\n  value: string;\n}\n\ninterface State {\n  maxLength: number;\n}\n\nclass WordFlipper extends React.Component<Props, State> {\n  state = {\n    maxLength: 0,\n  };\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (props.value.length > state.maxLength) {\n      return { maxLength: props.value.length };\n    }\n    return null;\n  }\n  render() {\n    const delayInMS = this.props.durationInMS * 0.15;\n    return (\n      <div style={{ display: \"inline-flex\", flexDirection: \"row\" }}>\n        {[...new Array(this.state.maxLength)].map((_, index, vv) => {\n          // used so that the front item is removed, not the back\n          const padding = this.state.maxLength - this.props.value.length;\n          const letter =\n            // if there is padding, pad from the front\n            padding > index\n              ? undefined\n              : // if there padding used on the string offset it\n              padding > 0\n              ? this.props.value[index - padding]\n              : // otherwise return the regular string\n                this.props.value[index];\n\n          return (\n            <Cell\n              key={vv.length - 1 - index}\n              value={letter}\n              delayInMS={delayInMS * index}\n              // reverse\n              // delayInMS={delayInMS * (vv.length - 1 - index)}\n              durationInMS={this.props.durationInMS}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default WordFlipper;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport WordFlipper from \"./WordFlipper\";\n\nconst sty = StyleSheet.create({\n  overall: {\n    display: \"flex\",\n    height: \"100vh\",\n    background: \"#000\",\n    flexDirection: \"column\",\n    fontSize: 32,\n    color: \"#fff\",\n    width: '400px',\n    margin: 'auto',\n  },\n});\n\ninterface State {\n  switcher: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = { switcher: false };\n  onClick = () => this.setState((s) => ({ switcher: !s.switcher }));\n  render() {\n    // see https://www.tiktok.com/@pizzaslime/video/6794486830667468037\n    const duration = 300;\n    return (\n      <div className={css(sty.overall)} onClick={this.onClick}>\n        <div>\n          <WordFlipper\n            value={this.state.switcher ? \"103\" : \"124\"}\n            durationInMS={duration}\n          />\n          <span>{\" transactions\"}</span>\n        </div>\n        <div>\n          <span>$</span>\n          <WordFlipper\n            value={this.state.switcher ? \"2,367.61\" : \"946.00\"}\n            durationInMS={duration}\n          />\n        </div>\n        <div>\n          <span>$</span>\n          <WordFlipper\n            value={this.state.switcher ? \"1\" : \"1,000,000,946.00\"}\n            durationInMS={duration}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}