{"version":3,"sources":["Cell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sty","StyleSheet","create","overall","overflow","transition","position","hiddenFixedWidthCell","opacity","cursorEvents","cell","animationName","transform","animationDuration","animationIterationCount","animationFillMode","top","left","hideCell","Cell","props","fixedWidthCellRef","React","createRef","setWidth","current","cellWidth","scrollWidth","state","setState","activeCellOne","cellOneValue","value","cellTwoValue","undefined","this","activeCellHidden","style","width","transitionDelay","delayInMS","className","css","onClick","s","ref","animationDelay","Component","display","justifyContent","alignItems","height","background","paddingLeft","paddingRight","holder","fontSize","color","App","value1","value2","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efb6bcc7.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\n\nconst showTransition = {\n  \"0%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n  \"30%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n  \"100%\": {\n    opacity: 1,\n    transform: \"scale(1)\",\n  },\n};\n\nconst hideTransition = {\n  \"0%\": {\n    opacity: 1,\n    transform: \"scale(1)\",\n  },\n  \"30%\": {\n    opacity: 0,\n    transform: \"scale(1)\",\n  },\n  \"100%\": {\n    opacity: 0,\n    transform: \"scale(0.4)\",\n  },\n};\n\nconst sty = StyleSheet.create({\n  overall: {\n    overflow: \"hidden\",\n    transition: \"200ms ease all\",\n    position: \"relative\",\n  },\n  hiddenFixedWidthCell: {\n    opacity: 0,\n    cursorEvents: \"none\",\n  },\n  cell: {\n    position: \"absolute\",\n    animationName: showTransition,\n    animationDuration: \"200ms\",\n    animationIterationCount: 1,\n    animationFillMode: \"both\",\n    top: 0,\n    left: 0,\n  },\n  hideCell: {\n    animationName: hideTransition,\n    animationDuration: \"200ms\",\n    animationIterationCount: 1,\n    animationFillMode: \"both\",\n  },\n});\n\ninterface State {\n  activeCellOne: boolean | null;\n  cellOneValue?: string;\n  cellTwoValue?: string;\n  cellWidth: number;\n}\n\ninterface Props {\n  value?: string;\n  delayInMS: number;\n}\n\nclass Cell extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeCellOne: true,\n      cellOneValue: this.props.value,\n      cellTwoValue: undefined,\n      cellWidth: 16,\n    };\n  }\n\n  fixedWidthCellRef = React.createRef<HTMLDivElement>();\n\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (state.activeCellOne) {\n      return { cellTwoValue: props.value, activeCellOne: false };\n    }\n    if (state.activeCellOne === false) {\n      return { cellOneValue: props.value, activeCellOne: true };\n    }\n    return null;\n  }\n\n  setWidth = () => {\n    if (this.fixedWidthCellRef.current) {\n      const cellWidth = this.fixedWidthCellRef.current.scrollWidth;\n      if (cellWidth > this.state.cellWidth) {\n        this.setState({ cellWidth });\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.setWidth();\n  }\n  componentDidUpdate() {\n    this.setWidth();\n  }\n\n  render() {\n    const activeCellHidden = this.state.activeCellOne\n      ? this.state.cellOneValue == null\n      : this.state.cellTwoValue == null;\n\n    return (\n      <div\n        style={{\n          width: activeCellHidden ? 0 : this.state.cellWidth,\n          transitionDelay: `${this.props.delayInMS}ms`,\n        }}\n        className={css(sty.overall)}\n        onClick={() =>\n          this.setState((s) => ({\n            activeCellOne: s.activeCellOne !== null ? !s.activeCellOne : null,\n          }))\n        }\n      >\n        <span\n          ref={this.fixedWidthCellRef}\n          className={css(sty.hiddenFixedWidthCell)}\n        >\n          8\n        </span>\n        <span\n          className={css(\n            sty.cell,\n            this.state.activeCellOne === true ? null : sty.hideCell\n          )}\n          style={{ animationDelay: `${this.props.delayInMS}ms` }}\n        >\n          {this.state.cellOneValue}\n        </span>\n        <span\n          className={css(\n            sty.cell,\n            this.state.activeCellOne === false ? null : sty.hideCell\n          )}\n          style={{ animationDelay: `${this.props.delayInMS}ms` }}\n        >\n          {this.state.cellTwoValue}\n        </span>\n      </div>\n    );\n  }\n}\nexport default Cell;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Cell from \"./Cell\";\n\nconst sty = StyleSheet.create({\n  overall: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    background: \"#000\",\n    paddingLeft: '400px',\n    paddingRight: '400px'\n  },\n  holder: {\n    justifyContent: \"flex-end\",\n    fontSize: 32,\n    display: \"flex\",\n    color: \"#fff\",\n  },\n});\n\ninterface State {\n  value1: string;\n  value2: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    value1: \"124\",\n    value2: \"2367.61\"\n  };\n  render() {\n    return (\n      <div\n        className={css(sty.overall)}\n        onClick={() =>\n          this.setState((s) => {\n            if (s.value1 === \"103\") {\n              return { value1: \"124\", value2:  \"2367.61\" };\n            }\n            return { value1: \"103\", value2:\"946.00\" };\n          })\n        }\n      >\n        <div className={css(sty.holder)}>\n          <Cell value={this.state.value1[0]} delayInMS={30} />\n          <Cell value={this.state.value1[1]} delayInMS={60} />\n          <Cell value={this.state.value1[2]} delayInMS={90} />\n          <span style={{ padding: 8}} />\n          {\"transactions\"}\n        </div>\n        <div className={css(sty.holder)}>\n          $\n        <Cell value={this.state.value2[0]} delayInMS={30} />\n          <Cell value={this.state.value2[1]} delayInMS={60} />\n          <Cell value={this.state.value2[2]} delayInMS={90} />\n          <Cell value={this.state.value2[3]} delayInMS={120} />\n          <Cell value={this.state.value2[4]} delayInMS={150} />\n          <Cell value={this.state.value2[5]} delayInMS={180} />\n          <Cell value={this.state.value2[6]} delayInMS={210} />\n\n\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}